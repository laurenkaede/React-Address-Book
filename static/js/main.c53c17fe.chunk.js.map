{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","name","number","addressBook","handleInputChange1","event","setState","target","value","handleInputChange2","addContact","newContact","clearField","concat","alert","form","className","type","onChange","this","placeHolder","onClick","map","contact","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPAmFeA,G,kNA9EbC,MAAQ,CACJC,KAAM,GACNC,OAAQ,GACRC,YAAa,I,EAGjBC,mBAAqB,SAACC,GAClB,EAAKC,SAAS,CACZL,KAAMI,EAAME,OAAOC,S,EAIzBC,mBAAqB,SAACJ,GAClB,EAAKC,SAAS,CACZJ,OAAQG,EAAME,OAAOC,S,EAI3BE,WAAa,WACT,IAAMC,EAAa,CACjBV,KAAM,EAAKD,MAAMC,KACjBC,OAAQ,EAAKF,MAAME,QAGG,KAApB,EAAKF,MAAMC,MAAqC,KAAtB,EAAKD,MAAME,OAKzC,EAAKI,UAAS,SAAAM,GAAU,MAAK,CAC3BT,YAAaS,EAAWT,YAAYU,OAAOF,GAC3CV,KAAM,GACNC,OAAQ,OAPRY,MAAM,8B,uDAaV,IAAIC,EACF,yBAAKC,UAAY,aACf,2BACEA,UAAY,YACZC,KAAK,OACLC,SAAUC,KAAKf,mBACfI,MAAOW,KAAKnB,MAAMC,KAClBmB,YAAY,SAGd,2BACEJ,UAAY,WACZC,KAAK,OACLC,SAAUC,KAAKV,mBACfD,MAAOW,KAAKnB,MAAME,OAClBkB,YAAY,WAGd,4BAAQJ,UAAY,aAAaC,KAAK,SAASI,QAASF,KAAKT,YAA7D,gBAMJ,OACE,yBAAKM,UAAW,UACd,qDACCD,EACAI,KAAKnB,MAAMG,YAAYmB,KAAI,SAAAC,GAAO,OACjC,yBAAKP,UAAU,YACb,4BAAKO,EAAQtB,MACb,2BAAIsB,EAAQrB,QACZ,sC,GAxEMsB,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c53c17fe.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n \n  state = {\n      name: \"\",\n      number: \"\",\n      addressBook: []\n    };\n   \n  handleInputChange1 = (event) => {\n      this.setState({\n        name: event.target.value\n      });\n    };\n\n  handleInputChange2 = (event) => {\n      this.setState({\n        number: event.target.value\n      });\n    };\n\n  addContact = () => {\n      const newContact = {\n        name: this.state.name,\n        number: this.state.number\n      };\n\n      if (this.state.name === \"\" || this.state.number === \"\") {\n        alert(\"Both fields are required.\");\n        return;\n      }\n\n      this.setState(clearField => ({\n        addressBook: clearField.addressBook.concat(newContact),\n        name: \"\",\n        number: \"\"\n      }));\n    };\n  \n\n  render() {\n    let form = (\n      <div className = \"container\">\n        <input\n          className = \"nameInput\"\n          type=\"text\"\n          onChange={this.handleInputChange1}\n          value={this.state.name}\n          placeHolder=\"Name\"\n        />\n\n        <input\n          className = \"numInput\"\n          type=\"text\"\n          onChange={this.handleInputChange2}\n          value={this.state.number}\n          placeHolder=\"Number\"\n        />\n\n        <button className = \"contactBtn\" type=\"button\" onClick={this.addContact}>\n          Add Contact\n        </button>\n      </div>\n    );\n\n    return (\n      <div className= \"header\">\n        <h1>Lauren's Address Book</h1>\n        {form}\n        {this.state.addressBook.map(contact => (\n          <div className=\"contacts\">\n            <h2>{contact.name}</h2>\n            <p>{contact.number}</p>\n            <hr />\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}